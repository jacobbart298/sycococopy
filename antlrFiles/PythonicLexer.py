# Generated from ./Pythonic.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from antlrFiles.PythonicParser import PythonicParser


def serializedATN():
    return [
        4,0,22,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,131,
        8,13,1,14,1,14,1,14,3,14,136,8,14,1,15,3,15,139,8,15,1,15,1,15,5,
        15,143,8,15,10,15,12,15,146,9,15,1,15,3,15,149,8,15,1,16,1,16,1,
        16,1,16,5,16,155,8,16,10,16,12,16,158,9,16,1,16,1,16,1,17,3,17,163,
        8,17,1,17,4,17,166,8,17,11,17,12,17,167,1,17,1,17,4,17,172,8,17,
        11,17,12,17,173,1,17,3,17,177,8,17,1,17,1,17,1,17,4,17,182,8,17,
        11,17,12,17,183,3,17,186,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,197,8,18,1,19,1,19,5,19,201,8,19,10,19,12,19,204,
        9,19,1,20,1,20,1,20,1,20,1,21,3,21,211,8,21,1,21,1,21,5,21,215,8,
        21,10,21,12,21,218,9,21,1,156,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,1,0,7,1,0,45,45,1,0,49,57,1,0,48,57,1,0,
        48,48,2,0,60,60,62,62,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,239,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,55,1,0,0,0,5,
        62,1,0,0,0,7,65,1,0,0,0,9,70,1,0,0,0,11,75,1,0,0,0,13,85,1,0,0,0,
        15,94,1,0,0,0,17,102,1,0,0,0,19,109,1,0,0,0,21,114,1,0,0,0,23,117,
        1,0,0,0,25,119,1,0,0,0,27,130,1,0,0,0,29,135,1,0,0,0,31,148,1,0,
        0,0,33,150,1,0,0,0,35,185,1,0,0,0,37,196,1,0,0,0,39,198,1,0,0,0,
        41,205,1,0,0,0,43,210,1,0,0,0,45,46,5,112,0,0,46,47,5,114,0,0,47,
        48,5,111,0,0,48,49,5,116,0,0,49,50,5,111,0,0,50,51,5,99,0,0,51,52,
        5,111,0,0,52,53,5,108,0,0,53,54,5,58,0,0,54,2,1,0,0,0,55,56,5,114,
        0,0,56,57,5,111,0,0,57,58,5,108,0,0,58,59,5,101,0,0,59,60,5,115,
        0,0,60,61,5,58,0,0,61,4,1,0,0,0,62,63,5,116,0,0,63,64,5,111,0,0,
        64,6,1,0,0,0,65,66,5,102,0,0,66,67,5,114,0,0,67,68,5,111,0,0,68,
        69,5,109,0,0,69,8,1,0,0,0,70,71,5,115,0,0,71,72,5,101,0,0,72,73,
        5,110,0,0,73,74,5,100,0,0,74,10,1,0,0,0,75,76,5,115,0,0,76,77,5,
        101,0,0,77,78,5,113,0,0,78,79,5,117,0,0,79,80,5,101,0,0,80,81,5,
        110,0,0,81,82,5,99,0,0,82,83,5,101,0,0,83,84,5,58,0,0,84,12,1,0,
        0,0,85,86,5,115,0,0,86,87,5,104,0,0,87,88,5,117,0,0,88,89,5,102,
        0,0,89,90,5,102,0,0,90,91,5,108,0,0,91,92,5,101,0,0,92,93,5,58,0,
        0,93,14,1,0,0,0,94,95,5,99,0,0,95,96,5,104,0,0,96,97,5,111,0,0,97,
        98,5,105,0,0,98,99,5,99,0,0,99,100,5,101,0,0,100,101,5,58,0,0,101,
        16,1,0,0,0,102,103,5,114,0,0,103,104,5,101,0,0,104,105,5,112,0,0,
        105,106,5,101,0,0,106,107,5,97,0,0,107,108,5,116,0,0,108,18,1,0,
        0,0,109,110,5,108,0,0,110,111,5,111,0,0,111,112,5,111,0,0,112,113,
        5,112,0,0,113,20,1,0,0,0,114,115,3,39,19,0,115,116,5,58,0,0,116,
        22,1,0,0,0,117,118,5,40,0,0,118,24,1,0,0,0,119,120,5,41,0,0,120,
        26,1,0,0,0,121,122,5,84,0,0,122,123,5,114,0,0,123,124,5,117,0,0,
        124,131,5,101,0,0,125,126,5,70,0,0,126,127,5,97,0,0,127,128,5,108,
        0,0,128,129,5,115,0,0,129,131,5,101,0,0,130,121,1,0,0,0,130,125,
        1,0,0,0,131,28,1,0,0,0,132,136,3,33,16,0,133,136,3,31,15,0,134,136,
        3,35,17,0,135,132,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,30,
        1,0,0,0,137,139,7,0,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,
        1,0,0,0,140,144,7,1,0,0,141,143,7,2,0,0,142,141,1,0,0,0,143,146,
        1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,149,1,0,0,0,146,144,
        1,0,0,0,147,149,7,3,0,0,148,138,1,0,0,0,148,147,1,0,0,0,149,32,1,
        0,0,0,150,156,5,34,0,0,151,152,5,92,0,0,152,155,5,34,0,0,153,155,
        9,0,0,0,154,151,1,0,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,157,
        1,0,0,0,156,154,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,
        5,34,0,0,160,34,1,0,0,0,161,163,7,0,0,0,162,161,1,0,0,0,162,163,
        1,0,0,0,163,165,1,0,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,167,
        1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,171,
        5,46,0,0,170,172,7,2,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,
        1,0,0,0,173,174,1,0,0,0,174,186,1,0,0,0,175,177,7,0,0,0,176,175,
        1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,7,3,0,0,179,181,
        5,46,0,0,180,182,7,2,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,
        1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,162,1,0,0,0,185,176,
        1,0,0,0,186,36,1,0,0,0,187,197,7,4,0,0,188,189,5,60,0,0,189,197,
        5,61,0,0,190,191,5,62,0,0,191,197,5,61,0,0,192,193,5,33,0,0,193,
        197,5,61,0,0,194,195,5,61,0,0,195,197,5,61,0,0,196,187,1,0,0,0,196,
        188,1,0,0,0,196,190,1,0,0,0,196,192,1,0,0,0,196,194,1,0,0,0,197,
        38,1,0,0,0,198,202,7,5,0,0,199,201,7,6,0,0,200,199,1,0,0,0,201,204,
        1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,40,1,0,0,0,204,202,1,
        0,0,0,205,206,5,32,0,0,206,207,1,0,0,0,207,208,6,20,0,0,208,42,1,
        0,0,0,209,211,5,13,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,
        0,0,0,212,216,5,10,0,0,213,215,5,9,0,0,214,213,1,0,0,0,215,218,1,
        0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,44,1,0,0,0,218,216,1,0,
        0,0,18,0,130,135,138,144,148,154,156,162,167,173,176,183,185,196,
        202,210,216,1,6,0,0
    ]

class PythonicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROTOCOL = 1
    ROLES = 2
    TO = 3
    FROM = 4
    SEND = 5
    SEQUENCE = 6
    SHUFFLE = 7
    CHOICE = 8
    REPEAT = 9
    LOOP = 10
    LOOPLABEL = 11
    OPENINGBRACKET = 12
    CLOSINGBRACKET = 13
    BOOLEAN = 14
    PRIMITIVE = 15
    INTEGER = 16
    STRING = 17
    FLOAT = 18
    COMPARATOR = 19
    WORD = 20
    WS = 21
    NL = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'protocol:'", "'roles:'", "'to'", "'from'", "'send'", "'sequence:'", 
            "'shuffle:'", "'choice:'", "'repeat'", "'loop'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "PROTOCOL", "ROLES", "TO", "FROM", "SEND", "SEQUENCE", "SHUFFLE", 
            "CHOICE", "REPEAT", "LOOP", "LOOPLABEL", "OPENINGBRACKET", "CLOSINGBRACKET", 
            "BOOLEAN", "PRIMITIVE", "INTEGER", "STRING", "FLOAT", "COMPARATOR", 
            "WORD", "WS", "NL" ]

    ruleNames = [ "PROTOCOL", "ROLES", "TO", "FROM", "SEND", "SEQUENCE", 
                  "SHUFFLE", "CHOICE", "REPEAT", "LOOP", "LOOPLABEL", "OPENINGBRACKET", 
                  "CLOSINGBRACKET", "BOOLEAN", "PRIMITIVE", "INTEGER", "STRING", 
                  "FLOAT", "COMPARATOR", "WORD", "WS", "NL" ]

    grammarFileName = "Pythonic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class MyCoolDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: PythonicLexer = lexer

        def pull_token(self):
            return super(PythonicLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.MyCoolDenter(self, self.NL, PythonicParser.INDENT, PythonicParser.DEDENT, False)
        return self.denter.next_token()



